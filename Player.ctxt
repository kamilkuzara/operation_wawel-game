#BlueJ class context
comment0.target=Player
comment0.text=\r\n\ Class\ Player\ is\ a\ part\ of\ "Operation\ Wawel"\ application.\r\n\ It\ extends\ class\ Character\ with\ player's\ features\ and\ behaviours.\r\n\r\n\ @author\ Kamil\ Kuzara\r\n\ @version\ 2018.11\r\n
comment1.params=startingRoom
comment1.target=Player(Room)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Player\r\n
comment2.params=direction
comment2.target=void\ goRoom(java.lang.String)
comment2.text=\ \r\n\ Go\ in\ the\ specified\ direction.\ Add\ the\ current\ room\ to\r\n\ the\ list\ of\ previous\ rooms\ (tracks\ the\ movement\ for\ the\ \r\n\ use\ of\ "back"\ command).\r\n\ \r\n\ @param\ String\ the\ direction\ in\ which\ we\ want\ to\ go\r\n
comment3.params=
comment3.target=void\ goBack()
comment3.text=\ \r\n\ Go\ back\ to\ the\ previous\ room.\ If\ invoked\ at\ the\ beginning\ of\ the\ game\ \r\n\ when\ there\ is\ no\ previous\ room\ to\ go\ to,\ the\ character\ will\ go\ to\ the\r\n\ room\ they\ are\ currently\ in,\ i.e\ they\ will\ stay\ in\ the\ same\ room.\r\n\ When\ invoked\ a\ number\ of\ times\ in\ a\ row,\ the\ character\ actually\ moves\ back\r\n\ along\ their\ track.\r\n
comment4.params=destination\ rooms
comment4.target=void\ teleport(Room,\ java.util.ArrayList)
comment4.text=\r\n\ Teleport\ the\ player\ to\ the\ specified\ room.\ The\ room\r\n\ does\ not\ have\ to\ be\ linked\ to\ the\ current\ room.\r\n\ \r\n\ @param\ Room\ destination\ to\ which\ the\ player\ is\ moved\r\n\ @param\ ArrayList<Room>\ the\ list\ of\ rooms\ to\ which\ all\ the\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ items\ will\ be\ dropped\ randomly\r\n
comment5.params=character\ weaponName
comment5.target=void\ attack(Character,\ java.lang.String)
comment5.text=\r\n\ Attack\ the\ specified\ character\ with\ the\ specified\ weapon.\ \r\n\ \r\n\ @param\ Character\ the\ character\ to\ be\ attacked\r\n\ @param\ String\ the\ name\ of\ the\ weapon\ to\ be\ used\r\n
comment6.params=itemName
comment6.target=void\ collectItem(java.lang.String)
comment6.text=\r\n\ Collect\ the\ specified\ item.\ To\ collect\ an\ item\ check\ if\ it\ actually\ is\ held\r\n\ in\ the\ "currentRoom".\ If\ it\ is,\ then\ add\ this\ item\ to\ the\ character's\ item\r\n\ list,\ remove\ it\ from\ the\ current\ room's\ item\ list\ and\ increase\ weight\ carried\r\n\ by\ the\ character.\ The\ method\ also\ checks\ if\ the\ item\ does\ not\ exceed\ the\ maximum\r\n\ weight\ that\ the\ character\ can\ carry.\r\n\ \r\n\ If\ any\ of\ the\ checks\ indicate\ that\ the\ item\ cannot\ be\ collected,\ an\ appropriate\r\n\ message\ is\ printed\ out\ on\ the\ screen\ and\ the\ method\ ends\ without\ executing\ the\r\n\ operation\ of\ changing\ the\ item's\ holder.\r\n\ \r\n\ @param\ String\ the\ name\ of\ the\ item\ to\ be\ collected\r\n
comment7.params=itemName
comment7.target=void\ dropItem(java.lang.String)
comment7.text=\r\n\ Drop\ the\ specified\ item.\ Remove\ it\ from\ the\ list\r\n\ of\ player's\ items\ and\ place\ it\ on\ the\ list\ of\ items\ \r\n\ of\ the\ current\ room.\r\n\ \r\n\ @param\ String\ the\ name\ of\ the\ item\ to\ be\ dropped\r\n
comment8.params=
comment8.target=void\ listItems()
comment8.text=\r\n\ Print\ all\ the\ items\ the\ character\ is\ carrying\ to\ System.out.\r\n
numComments=9
